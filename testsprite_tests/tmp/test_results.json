[
  {
    "projectId": "944531b1-27df-4dde-bc2a-b6637e41d950",
    "testId": "c9e27959-9fba-443e-b9fe-be8ee738236a",
    "userId": "e428a4a8-60d1-7051-a86d-c0c12ee9791a",
    "title": "TC001-admin login with valid credentials",
    "description": "Test the /api/auth/login endpoint with valid admin email and password to ensure successful login and session creation.",
    "code": "import requests\n\ndef test_admin_login_with_valid_credentials():\n    base_url = \"http://localhost:3000\"\n    endpoint = \"/api/auth/login\"\n    url = base_url + endpoint\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"email\": \"admin@pizzaria.com\",\n        \"password\": \"admin123\"\n    }\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=30)\n        # Assert status code 200 for successful login\n        assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n        # Additional checks could be presence of session token or similar\n        response_json = response.json()\n        # Example: check that a token or session key exists in response if applicable\n        assert isinstance(response_json, dict), \"Response is not a JSON object\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_admin_login_with_valid_credentials()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 25, in <module>\n  File \"<string>\", line 17, in test_admin_login_with_valid_credentials\nAssertionError: Expected status code 200 but got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T00:07:34.532Z",
    "modified": "2025-09-10T00:08:05.823Z"
  },
  {
    "projectId": "944531b1-27df-4dde-bc2a-b6637e41d950",
    "testId": "64965ecf-a984-4192-94d6-806ad83f9e46",
    "userId": "e428a4a8-60d1-7051-a86d-c0c12ee9791a",
    "title": "TC002-list all products",
    "description": "Test the GET /api/products endpoint to verify it returns a list of all products with correct details.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\ndef test_list_all_products():\n    base_url = \"http://localhost:3000\"\n    endpoint = \"/api/products\"\n    url = base_url + endpoint\n    auth = HTTPBasicAuth(\"admin@pizzaria.com\", \"admin123\")\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    timeout = 30\n\n    response = None\n    try:\n        response = requests.get(url, headers=headers, auth=auth, timeout=timeout)\n        assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n        json_data = response.json()\n        assert isinstance(json_data, list), \"Response JSON is not a list\"\n        # Optionally check that each product has expected fields\n        for product in json_data:\n            assert isinstance(product, dict), \"Product item is not a dictionary\"\n            # Check required fields based on PRD schema snippet for product\n            assert \"nome\" in product, \"Product missing 'nome'\"\n            assert \"categoria_id\" in product, \"Product missing 'categoria_id'\"\n            assert \"preco\" in product, \"Product missing 'preco'\"\n            assert \"descricao\" in product, \"Product missing 'descricao'\"\n    except (requests.RequestException, AssertionError) as e:\n        raise AssertionError(f\"Test failed: {e}\")\n\ntest_list_all_products()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 17, in test_list_all_products\nAssertionError: Expected status code 200 but got 404\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 31, in <module>\n  File \"<string>\", line 29, in test_list_all_products\nAssertionError: Test failed: Expected status code 200 but got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T00:07:34.539Z",
    "modified": "2025-09-10T00:08:06.810Z"
  },
  {
    "projectId": "944531b1-27df-4dde-bc2a-b6637e41d950",
    "testId": "784221e5-1251-4e78-9c9a-2cce9da53eb1",
    "userId": "e428a4a8-60d1-7051-a86d-c0c12ee9791a",
    "title": "TC003-create new product with valid data",
    "description": "Test the POST /api/products endpoint with valid product data to ensure a new product is created successfully.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nUSERNAME = \"admin@pizzaria.com\"\nPASSWORD = \"admin123\"\nTIMEOUT = 30\n\n\ndef get_auth_cookies():\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    login_payload = {\"email\": USERNAME, \"password\": PASSWORD}\n    headers = {\"Content-Type\": \"application/json\"}\n    try:\n        response = requests.post(login_url, json=login_payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Login failed with status code {response.status_code}\"\n        return response.cookies\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Login request failed: {e}\"\n\n\ndef test_create_new_product_with_valid_data():\n    cookies = get_auth_cookies()\n    url = f\"{BASE_URL}/api/products\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"nome\": \"Pizza Margherita\",\n        \"categoria_id\": 1,\n        \"preco\": 29.90,\n        \"descricao\": \"Pizza tradicional com molho de tomate, mussarela e manjericão\"\n    }\n    response = None\n    product_id = None\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, cookies=cookies, timeout=TIMEOUT)\n        assert response.status_code == 201, f\"Expected status code 201 but got {response.status_code}\"\n        json_response = response.json()\n        # Assuming that the API returns the created product object including its ID\n        assert \"id\" in json_response, \"Response JSON does not contain 'id' of created product\"\n        product_id = json_response[\"id\"]\n        assert json_response.get(\"nome\") == payload[\"nome\"], \"Product name does not match\"\n        assert json_response.get(\"categoria_id\") == payload[\"categoria_id\"], \"Category ID does not match\"\n        assert float(json_response.get(\"preco\", 0)) == payload[\"preco\"], \"Product price does not match\"\n        assert json_response.get(\"descricao\") == payload[\"descricao\"], \"Product description does not match\"\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n    finally:\n        # Clean up: delete the created product if created\n        if product_id is not None:\n            try:\n                delete_url = f\"{BASE_URL}/api/products/{product_id}\"\n                del_response = requests.delete(delete_url, cookies=cookies, timeout=TIMEOUT)\n                assert del_response.status_code == 200 or del_response.status_code == 204, f\"Failed to delete product with id {product_id}, status code: {del_response.status_code}\"\n            except requests.exceptions.RequestException:\n                pass\n\n\ntest_create_new_product_with_valid_data()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 60, in <module>\n  File \"<string>\", line 22, in test_create_new_product_with_valid_data\n  File \"<string>\", line 15, in get_auth_cookies\nAssertionError: Login failed with status code 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T00:07:34.546Z",
    "modified": "2025-09-10T00:08:21.018Z"
  },
  {
    "projectId": "944531b1-27df-4dde-bc2a-b6637e41d950",
    "testId": "c3233cf4-3a0f-417a-b625-b47e6364c60c",
    "userId": "e428a4a8-60d1-7051-a86d-c0c12ee9791a",
    "title": "TC004-update existing product",
    "description": "Test the PUT /api/products/{id} endpoint to update product details and verify the changes are saved.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nHEADERS = {\"Content-Type\": \"application/json\"}\nTIMEOUT = 30\n\n\ndef test_update_existing_product():\n    # Step 1: Create a new product first to update it later\n    new_product_data = {\n        \"nome\": \"Test Pizza Update\",\n        \"categoria_id\": 1,\n        \"preco\": 20.0,\n        \"descricao\": \"Pizza criada para teste de atualização\"\n    }\n    created_product_id = None\n    try:\n        create_resp = requests.post(\n            f\"{BASE_URL}/api/products\",\n            headers=HEADERS,\n            json=new_product_data,\n            timeout=TIMEOUT,\n        )\n        assert create_resp.status_code == 201, f\"Expected 201 on product creation, got {create_resp.status_code}\"\n        product_created = create_resp.json()\n        assert \"id\" in product_created, \"Created product response missing 'id'\"\n        created_product_id = product_created[\"id\"]\n\n        # Step 2: Prepare updated product details\n        updated_product_data = {\n            \"nome\": \"Test Pizza Updated\",\n            \"categoria_id\": 1,\n            \"preco\": 25.5,\n            \"descricao\": \"Descrição atualizada da pizza para teste\"\n        }\n\n        # Step 3: Update the created product\n        update_resp = requests.put(\n            f\"{BASE_URL}/api/products/{created_product_id}\",\n            headers=HEADERS,\n            json=updated_product_data,\n            timeout=TIMEOUT,\n        )\n        assert update_resp.status_code == 200, f\"Expected 200 on product update, got {update_resp.status_code}\"\n\n        # Step 4: Retrieve the updated product to verify changes\n        get_resp = requests.get(\n            f\"{BASE_URL}/api/products\",\n            headers=HEADERS,\n            timeout=TIMEOUT,\n        )\n        assert get_resp.status_code == 200, f\"Expected 200 on get products, got {get_resp.status_code}\"\n        products_list = get_resp.json()\n\n        # Find updated product in the list\n        product = next((p for p in products_list if p.get(\"id\") == created_product_id), None)\n        assert product is not None, \"Updated product not found in product list\"\n        assert product.get(\"nome\") == updated_product_data[\"nome\"], \"Product name was not updated correctly\"\n        assert product.get(\"categoria_id\") == updated_product_data[\"categoria_id\"], \"Product category was not updated correctly\"\n        assert abs(float(product.get(\"preco\", 0)) - updated_product_data[\"preco\"]) < 0.001, \"Product price was not updated correctly\"\n        assert product.get(\"descricao\") == updated_product_data[\"descricao\"], \"Product description was not updated correctly\"\n\n    finally:\n        # Cleanup: Delete the created product to maintain test environment\n        if created_product_id is not None:\n            requests.delete(\n                f\"{BASE_URL}/api/products/{created_product_id}\",\n                headers=HEADERS,\n                timeout=TIMEOUT,\n            )\n\n\ntest_update_existing_product()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 73, in <module>\n  File \"<string>\", line 24, in test_update_existing_product\nAssertionError: Expected 201 on product creation, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T00:07:34.553Z",
    "modified": "2025-09-10T00:08:25.275Z"
  },
  {
    "projectId": "944531b1-27df-4dde-bc2a-b6637e41d950",
    "testId": "adf3ffe5-2dcb-4791-8fe3-8ab9e2db0b83",
    "userId": "e428a4a8-60d1-7051-a86d-c0c12ee9791a",
    "title": "TC005-delete existing product",
    "description": "Test the DELETE /api/products/{id} endpoint to remove a product and confirm it is deleted from the database.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef test_delete_existing_product():\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Create a category first to have a valid categoria_id\n    category_data = {\n        \"nome\": \"Categoria Teste Para Produto\"\n    }\n    category_id = None\n    try:\n        category_resp = requests.post(f\"{BASE_URL}/api/categories\", json=category_data, headers=headers, timeout=TIMEOUT)\n        assert category_resp.status_code == 201, f\"Expected 201 Created for category, got {category_resp.status_code}\"\n        category_created = category_resp.json()\n        category_id = category_created.get(\"id\") or category_created.get(\"categoria_id\") or category_created.get(\"ID\")\n        assert category_id is not None, \"No category ID returned after creation\"\n\n        product_data = {\n            \"nome\": \"Produto Teste Para Delecao\",\n            \"categoria_id\": category_id,\n            \"preco\": 19.99,\n            \"descricao\": \"Produto criado para teste de exclusão\"\n        }\n\n        product_id = None\n        try:\n            # Create a new product to delete\n            create_resp = requests.post(f\"{BASE_URL}/api/products\", json=product_data, headers=headers, timeout=TIMEOUT)\n            assert create_resp.status_code == 201, f\"Expected 201 Created, got {create_resp.status_code}\"\n            product_created = create_resp.json()\n            product_id = product_created.get(\"id\") or product_created.get(\"product_id\") or product_created.get(\"ID\")\n            assert product_id is not None, \"No product ID returned after creation\"\n\n            # Delete the product\n            delete_resp = requests.delete(f\"{BASE_URL}/api/products/{product_id}\", headers=headers, timeout=TIMEOUT)\n            assert delete_resp.status_code == 200, f\"Expected 200 OK on delete, got {delete_resp.status_code}\"\n\n            # Verify the product is deleted by trying to get it (assuming 404 means not found)\n            get_resp = requests.get(f\"{BASE_URL}/api/products/{product_id}\", headers=headers, timeout=TIMEOUT)\n            assert get_resp.status_code == 404, f\"Expected 404 Not Found for deleted product, got {get_resp.status_code}\"\n\n        finally:\n            # Cleanup: in case deletion failed, attempt delete\n            if product_id is not None:\n                requests.delete(f\"{BASE_URL}/api/products/{product_id}\", headers=headers, timeout=TIMEOUT)\n\n    finally:\n        if category_id is not None:\n            requests.delete(f\"{BASE_URL}/api/categories/{category_id}\", headers=headers, timeout=TIMEOUT)\n\n\ntest_delete_existing_product()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 57, in <module>\n  File \"<string>\", line 18, in test_delete_existing_product\nAssertionError: Expected 201 Created for category, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T00:07:34.560Z",
    "modified": "2025-09-10T00:08:34.359Z"
  },
  {
    "projectId": "944531b1-27df-4dde-bc2a-b6637e41d950",
    "testId": "f4c7099f-0ae5-4b61-bcc2-c2729a6bdaf8",
    "userId": "e428a4a8-60d1-7051-a86d-c0c12ee9791a",
    "title": "TC006-list all categories",
    "description": "Test the GET /api/categories endpoint to verify it returns a list of all product categories.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\nUSERNAME = \"admin@pizzaria.com\"\nPASSWORD = \"admin123\"\n\ndef test_list_all_categories():\n    url = f\"{BASE_URL}/api/categories\"\n    try:\n        response = requests.get(url, auth=HTTPBasicAuth(USERNAME, PASSWORD), timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n\n    try:\n        categories = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(categories, list), \"Response JSON is not a list\"\n    for category in categories:\n        assert isinstance(category, dict), \"Category item is not a JSON object\"\n        assert \"nome\" in category or \"descricao\" in category or len(category) > 0, \"Category item missing expected fields\"\n\ntest_list_all_categories()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 13, in test_list_all_categories\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url: http://localhost:3000/api/categories\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 29, in <module>\n  File \"<string>\", line 15, in test_list_all_categories\nAssertionError: Request failed: 404 Client Error: Not Found for url: http://localhost:3000/api/categories\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T00:07:34.566Z",
    "modified": "2025-09-10T00:08:06.814Z"
  },
  {
    "projectId": "944531b1-27df-4dde-bc2a-b6637e41d950",
    "testId": "4ae64635-fd0b-41b5-b4f8-45dbcee87242",
    "userId": "e428a4a8-60d1-7051-a86d-c0c12ee9791a",
    "title": "TC007-create new category",
    "description": "Test the POST /api/categories endpoint with valid category data to ensure a new category is created successfully.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\n\ndef test_create_new_category():\n    url = f\"{BASE_URL}/api/categories\"\n    headers = {\"Content-Type\": \"application/json\"}\n    payload = {\n        \"nome\": \"Categoria Teste\",\n        \"descricao\": \"Descrição da Categoria Teste\"\n    }\n\n    try:\n        response = requests.post(\n            url,\n            json=payload,\n            headers=headers,\n            timeout=TIMEOUT\n        )\n    except requests.RequestException as e:\n        assert False, f\"Request to create category failed: {str(e)}\"\n\n    assert response.status_code == 201, f\"Expected status 201, got {response.status_code}\"\n\n\ntest_create_new_category()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 27, in <module>\n  File \"<string>\", line 24, in test_create_new_category\nAssertionError: Expected status 201, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T00:07:34.573Z",
    "modified": "2025-09-10T00:08:19.791Z"
  },
  {
    "projectId": "944531b1-27df-4dde-bc2a-b6637e41d950",
    "testId": "1f9817cd-7ddf-4bec-a783-54d511ff60c4",
    "userId": "e428a4a8-60d1-7051-a86d-c0c12ee9791a",
    "title": "TC008-add item to cart",
    "description": "Test the POST /api/cart/add endpoint to add a product item with quantity and customizations to the shopping cart.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nHEADERS = {\n    \"Content-Type\": \"application/json\"\n}\nTIMEOUT = 30\n\ndef test_add_item_to_cart():\n    product_id = None\n    # Step 1: Create a product to add to the cart (since no product_id provided)\n    create_product_payload = {\n        \"nome\": \"Test Pizza Margherita\",\n        \"categoria_id\": 1,  # Assuming category 1 exists; otherwise would need to create category\n        \"preco\": 25.00,\n        \"descricao\": \"Delicious cheese pizza for testing\"\n    }\n    try:\n        # Create product\n        create_product_resp = requests.post(\n            f\"{BASE_URL}/api/products\",\n            json=create_product_payload,\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n        assert create_product_resp.status_code == 201, f\"Product creation failed: {create_product_resp.text}\"\n        product_data = create_product_resp.json()\n        product_id = product_data.get(\"id\")\n        assert product_id is not None, \"Created product response missing 'id'\"\n\n        # Step 2: Add item to cart\n        add_to_cart_payload = {\n            \"product_id\": product_id,\n            \"quantity\": 2,\n            \"customizations\": {\n                \"tamanho\": \"Médio\",\n                \"adicionais\": [\"Borda recheada\", \"Extra queijo\"],\n                \"sabores\": [\"Margherita\", \"Calabresa\"]\n            }\n        }\n        add_to_cart_resp = requests.post(\n            f\"{BASE_URL}/api/cart/add\",\n            json=add_to_cart_payload,\n            headers=HEADERS,\n            timeout=TIMEOUT\n        )\n        assert add_to_cart_resp.status_code == 200, f\"Add to cart failed: {add_to_cart_resp.text}\"\n        add_to_cart_data = add_to_cart_resp.json()\n        assert isinstance(add_to_cart_data, dict), \"Add to cart response not a JSON object\"\n\n    finally:\n        # Cleanup: delete the created product if it was created\n        if product_id is not None:\n            delete_resp = requests.delete(\n                f\"{BASE_URL}/api/products/{product_id}\",\n                headers=HEADERS,\n                timeout=TIMEOUT\n            )\n            assert delete_resp.status_code == 200, f\"Failed to delete product in cleanup: {delete_resp.text}\"\n\ntest_add_item_to_cart()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 61, in <module>\n  File \"<string>\", line 26, in test_add_item_to_cart\nAssertionError: Product creation failed: <!DOCTYPE html><html lang=\"pt-BR\"><head><meta charSet=\"utf-8\"/><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"/><link rel=\"stylesheet\" href=\"/_next/static/css/app/layout.css?v=1757462944535\" data-precedence=\"next_static/css/app/layout.css\"/><link rel=\"preload\" as=\"script\" fetchPriority=\"low\" href=\"/_next/static/chunks/webpack.js?v=1757462944535\"/><script src=\"/_next/static/chunks/main-app.js?v=1757462944535\" async=\"\"></script><script src=\"/_next/static/chunks/app-pages-internals.js\" async=\"\"></script><script src=\"/_next/static/chunks/app/layout.js\" async=\"\"></script><meta name=\"robots\" content=\"noindex\"/><title>404: This page could not be found.</title><title>Pizzaria Digital</title><meta name=\"description\" content=\"Cardápio digital para pizzaria\"/><meta name=\"generator\" content=\"v0.dev\"/><script>document.querySelectorAll('body link[rel=\"icon\"], body link[rel=\"apple-touch-icon\"]').forEach(el => document.head.appendChild(el))</script><script src=\"/_next/static/chunks/polyfills.js\" noModule=\"\"></script></head><body class=\"__className_e8ce0c\"><div style=\"font-family:system-ui,&quot;Segoe UI&quot;,Roboto,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;;height:100vh;text-align:center;display:flex;flex-direction:column;align-items:center;justify-content:center\"><div><style>body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}</style><h1 class=\"next-error-h1\" style=\"display:inline-block;margin:0 20px 0 0;padding:0 23px 0 0;font-size:24px;font-weight:500;vertical-align:top;line-height:49px\">404</h1><div style=\"display:inline-block\"><h2 style=\"font-size:14px;font-weight:400;line-height:49px;margin:0\">This page could not be found.</h2></div></div></div><!--$--><!--/$--><!--$--><!--/$--><script src=\"/_next/static/chunks/webpack.js?v=1757462944535\" async=\"\"></script><script>(self.__next_f=self.__next_f||[]).push([0])</script><script>self.__next_f.push([1,\"3:\\\"$Sreact.fragment\\\"\\n5:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/layout-router.js\\\",[\\\"app-pages-internals\\\",\\\"static/chunks/app-pages-internals.js\\\"],\\\"\\\"]\\n6:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/render-from-template-context.js\\\",[\\\"app-pages-internals\\\",\\\"static/chunks/app-pages-internals.js\\\"],\\\"\\\"]\\n8:I[\\\"(app-pages-browser)/./lib/auth-context.tsx\\\",[\\\"app/layout\\\",\\\"static/chunks/app/layout.js\\\"],\\\"AuthProvider\\\"]\\n9:I[\\\"(app-pages-browser)/./lib/config-context.tsx\\\",[\\\"app/layout\\\",\\\"static/chunks/app/layout.js\\\"],\\\"ConfigProvider\\\"]\\na:I[\\\"(app-pages-browser)/./lib/cart-context.tsx\\\",[\\\"app/layout\\\",\\\"static/chunks/app/layout.js\\\"],\\\"CartProvider\\\"]\\n14:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/metadata/metadata-boundary.js\\\",[\\\"app-pages-internals\\\",\\\"static/chunks/app-pages-internals.js\\\"],\\\"MetadataBoundary\\\"]\\n17:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/metadata/metadata-boundary.js\\\",[\\\"app-pages-internals\\\",\\\"static/chunks/app-pages-internals.js\\\"],\\\"OutletBoundary\\\"]\\n1e:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/metadata/async-metadata.js\\\",[\\\"app-pages-internals\\\",\\\"static/chunks/app-pages-internals.js\\\"],\\\"AsyncMetadataOutlet\\\"]\\n21:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/error-boundary.js\\\",[\\\"app-pages-internals\\\",\\\"static/chunks/app-pages-internals.js\\\"],\\\"\\\"]\\n22:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/client-page.js\\\",[\\\"app-pages-internals\\\",\\\"static/chunks/app-pages-internals.js\\\"],\\\"ClientPageRoot\\\"]\\n23:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/client-segment.js\\\",[\\\"app-pages-internals\\\",\\\"static/chunks/app-pages-internals.js\\\"],\\\"ClientSegmentRoot\\\"]\\n24:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/http-access-fallback/error-boundary.js\\\",[\\\"app-pages-internals\\\",\\\"static/chunks/app-pages-internals.js\\\"],\\\"HTTPAccessFallbackBoundary\\\"]\\n25:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/metadata/metadata-boundary.js\\\",[\\\"app-pages-internals\\\",\\\"static\"])</script><script>self.__next_f.push([1,\"/chunks/app-pages-internals.js\\\"],\\\"ViewportBoundary\\\"]\\n2e:\\\"$Sreact.suspense\\\"\\n2f:I[\\\"(app-pages-browser)/./node_modules/next/dist/client/components/metadata/async-metadata.js\\\",[\\\"app-pages-internals\\\",\\\"static/chunks/app-pages-internals.js\\\"],\\\"AsyncMetadata\\\"]\\n:HL[\\\"/_next/static/css/app/layout.css?v=1757462944535\\\",\\\"style\\\"]\\n2:{\\\"name\\\":\\\"Preloads\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{\\\"preloadCallbacks\\\":[\\\"$E(()=\\u003e{ctx.componentMod.preloadStyle(fullHref,ctx.renderOpts.crossOrigin,ctx.nonce)})\\\"]}}\\n1:D\\\"$2\\\"\\n1:null\\n7:{\\\"name\\\":\\\"RootLayout\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{\\\"children\\\":[\\\"$\\\",\\\"$L5\\\",null,{\\\"parallelRouterKey\\\":\\\"children\\\",\\\"error\\\":\\\"$undefined\\\",\\\"errorStyles\\\":\\\"$undefined\\\",\\\"errorScripts\\\":\\\"$undefined\\\",\\\"template\\\":[\\\"$\\\",\\\"$3\\\",null,{\\\"children\\\":[\\\"$\\\",\\\"$L6\\\",null,{},null,[],1]},null,[],0],\\\"templateStyles\\\":\\\"$undefined\\\",\\\"templateScripts\\\":\\\"$undefined\\\",\\\"notFound\\\":\\\"$Y\\\",\\\"forbidden\\\":\\\"$undefined\\\",\\\"unauthorized\\\":\\\"$undefined\\\"},null,[],1],\\\"params\\\":\\\"$Y\\\"}}\\n4:D\\\"$7\\\"\\nc:{\\\"name\\\":\\\"NotFound\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{}}\\nb:D\\\"$c\\\"\\nd:{\\\"name\\\":\\\"HTTPAccessErrorFallback\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":\\\"$c\\\",\\\"stack\\\":[],\\\"props\\\":{\\\"status\\\":404,\\\"message\\\":\\\"This page could not be found.\\\"}}\\nb:D\\\"$d\\\"\\nb:[[\\\"$\\\",\\\"title\\\",null,{\\\"children\\\":\\\"404: This page could not be found.\\\"},\\\"$d\\\",[],1],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":{\\\"fontFamily\\\":\\\"system-ui,\\\\\\\"Segoe UI\\\\\\\",Roboto,Helvetica,Arial,sans-serif,\\\\\\\"Apple Color Emoji\\\\\\\",\\\\\\\"Segoe UI Emoji\\\\\\\"\\\",\\\"height\\\":\\\"100vh\\\",\\\"textAlign\\\":\\\"center\\\",\\\"display\\\":\\\"flex\\\",\\\"flexDirection\\\":\\\"column\\\",\\\"alignItems\\\":\\\"center\\\",\\\"justifyContent\\\":\\\"center\\\"},\\\"children\\\":[\\\"$\\\",\\\"div\\\",null,{\\\"children\\\":[[\\\"$\\\",\\\"style\\\",null,{\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\\\"}},\\\"$d\\\",[],1],[\\\"$\\\",\\\"h1\\\",null,{\\\"className\\\":\\\"next-error-h1\\\",\\\"style\\\":{\\\"display\\\":\\\"inline-block\\\",\\\"margin\\\":\\\"0 20px 0 0\\\",\\\"padding\\\":\\\"0 23px 0 0\\\",\\\"fontS\"])</script><script>self.__next_f.push([1,\"ize\\\":24,\\\"fontWeight\\\":500,\\\"verticalAlign\\\":\\\"top\\\",\\\"lineHeight\\\":\\\"49px\\\"},\\\"children\\\":404},\\\"$d\\\",[],1],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":{\\\"display\\\":\\\"inline-block\\\"},\\\"children\\\":[\\\"$\\\",\\\"h2\\\",null,{\\\"style\\\":{\\\"fontSize\\\":14,\\\"fontWeight\\\":400,\\\"lineHeight\\\":\\\"49px\\\",\\\"margin\\\":0},\\\"children\\\":\\\"This page could not be found.\\\"},\\\"$d\\\",[],1]},\\\"$d\\\",[],1]]},\\\"$d\\\",[],1]},\\\"$d\\\",[],1]]\\n4:[\\\"$\\\",\\\"html\\\",null,{\\\"lang\\\":\\\"pt-BR\\\",\\\"children\\\":[\\\"$\\\",\\\"body\\\",null,{\\\"className\\\":\\\"__className_e8ce0c\\\",\\\"children\\\":[\\\"$\\\",\\\"$L8\\\",null,{\\\"children\\\":[\\\"$\\\",\\\"$L9\\\",null,{\\\"children\\\":[\\\"$\\\",\\\"$La\\\",null,{\\\"children\\\":[\\\"$\\\",\\\"$L5\\\",null,{\\\"parallelRouterKey\\\":\\\"children\\\",\\\"error\\\":\\\"$undefined\\\",\\\"errorStyles\\\":\\\"$undefined\\\",\\\"errorScripts\\\":\\\"$undefined\\\",\\\"template\\\":[\\\"$\\\",\\\"$L6\\\",null,{},null,[],1],\\\"templateStyles\\\":\\\"$undefined\\\",\\\"templateScripts\\\":\\\"$undefined\\\",\\\"notFound\\\":[\\\"$b\\\",[]],\\\"forbidden\\\":\\\"$undefined\\\",\\\"unauthorized\\\":\\\"$undefined\\\"},null,[],1]},\\\"$7\\\",[[\\\"RootLayout\\\",\\\"webpack-internal:///(rsc)/./app/layout.tsx\\\",32,106]],1]},\\\"$7\\\",[[\\\"RootLayout\\\",\\\"webpack-internal:///(rsc)/./app/layout.tsx\\\",31,102]],1]},\\\"$7\\\",[[\\\"RootLayout\\\",\\\"webpack-internal:///(rsc)/./app/layout.tsx\\\",30,98]],1]},\\\"$7\\\",[[\\\"RootLayout\\\",\\\"webpack-internal:///(rsc)/./app/layout.tsx\\\",28,94]],1]},\\\"$7\\\",[[\\\"RootLayout\\\",\\\"webpack-internal:///(rsc)/./app/layout.tsx\\\",26,87]],1]\\nf:{\\\"name\\\":\\\"NotFound\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{\\\"params\\\":\\\"$@\\\",\\\"searchParams\\\":\\\"$@\\\"}}\\ne:D\\\"$f\\\"\\n10:{\\\"name\\\":\\\"HTTPAccessErrorFallback\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":\\\"$f\\\",\\\"stack\\\":[],\\\"props\\\":{\\\"status\\\":404,\\\"message\\\":\\\"This page could not be found.\\\"}}\\ne:D\\\"$10\\\"\\ne:[[\\\"$\\\",\\\"title\\\",null,{\\\"children\\\":\\\"404: This page could not be found.\\\"},\\\"$10\\\",[],1],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":\\\"$b:1:props:style\\\",\\\"children\\\":[\\\"$\\\",\\\"div\\\",null,{\\\"children\\\":[[\\\"$\\\",\\\"style\\\",null,{\\\"dangerouslySetInnerHTML\\\":{\\\"__html\\\":\\\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\\\"}},\\\"$10\\\",[],1],[\\\"$\\\",\\\"h1\\\",null,{\\\"className\\\":\\\"next-error-h1\\\",\\\"style\\\":\\\"$b:1:props:children\"])</script><script>self.__next_f.push([1,\":props:children:1:props:style\\\",\\\"children\\\":404},\\\"$10\\\",[],1],[\\\"$\\\",\\\"div\\\",null,{\\\"style\\\":\\\"$b:1:props:children:props:children:2:props:style\\\",\\\"children\\\":[\\\"$\\\",\\\"h2\\\",null,{\\\"style\\\":\\\"$b:1:props:children:props:children:2:props:children:props:style\\\",\\\"children\\\":\\\"This page could not be found.\\\"},\\\"$10\\\",[],1]},\\\"$10\\\",[],1]]},\\\"$10\\\",[],1]},\\\"$10\\\",[],1]]\\n12:{\\\"name\\\":\\\"\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{}}\\n11:D\\\"$12\\\"\\n13:{\\\"name\\\":\\\"MetadataTree\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{}}\\n11:D\\\"$13\\\"\\n16:{\\\"name\\\":\\\"__next_metadata_boundary__\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":\\\"$13\\\",\\\"stack\\\":[],\\\"props\\\":{}}\\n15:D\\\"$16\\\"\\n11:[\\\"$\\\",\\\"$L14\\\",null,{\\\"children\\\":\\\"$L15\\\"},\\\"$13\\\",[],1]\\n19:{\\\"name\\\":\\\"__next_outlet_boundary__\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{\\\"ready\\\":\\\"$E(async function getViewportReady() {\\\\n        await viewport();\\\\n        return undefined;\\\\n    })\\\"}}\\n18:D\\\"$19\\\"\\n1b:{\\\"name\\\":\\\"__next_outlet_boundary__\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{\\\"ready\\\":\\\"$E(async function getMetadataReady() {\\\\n        // Only warm up metadata() call when it's blocking metadata,\\\\n        // otherwise it will be fully managed by AsyncMetadata component.\\\\n        if (!serveStreamingMetadata) {\\\\n            await metadata();\\\\n        }\\\\n        return undefined;\\\\n    })\\\"}}\\n1a:D\\\"$1b\\\"\\n1d:{\\\"name\\\":\\\"StreamingMetadataOutlet\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{}}\\n1c:D\\\"$1d\\\"\\n1c:[\\\"$\\\",\\\"$L1e\\\",null,{\\\"promise\\\":\\\"$@1f\\\"},\\\"$1d\\\",[],1]\\n\"])</script><script>self.__next_f.push([1,\"26:{\\\"name\\\":\\\"NonIndex\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{\\\"ctx\\\":{\\\"componentMod\\\":{\\\"GlobalError\\\":\\\"$21\\\",\\\"__next_app__\\\":{\\\"require\\\":\\\"$E(function __webpack_require__(moduleId) {\\\\n/******/ \\\\t\\\\t// Check if module is in cache\\\\n/******/ \\\\t\\\\tvar cachedModule = __webpack_module_cache__[moduleId];\\\\n/******/ \\\\t\\\\tif (cachedModule !== undefined) {\\\\n/******/ \\\\t\\\\t\\\\treturn cachedModule.exports;\\\\n/******/ \\\\t\\\\t}\\\\n/******/ \\\\t\\\\t// Create a new module (and put it into the cache)\\\\n/******/ \\\\t\\\\tvar module = __webpack_module_cache__[moduleId] = {\\\\n/******/ \\\\t\\\\t\\\\tid: moduleId,\\\\n/******/ \\\\t\\\\t\\\\tloaded: false,\\\\n/******/ \\\\t\\\\t\\\\texports: {}\\\\n/******/ \\\\t\\\\t};\\\\n/******/ \\\\t\\\\n/******/ \\\\t\\\\t// Execute the module function\\\\n/******/ \\\\t\\\\tvar threw = true;\\\\n/******/ \\\\t\\\\ttry {\\\\n/******/ \\\\t\\\\t\\\\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\\\n/******/ \\\\t\\\\t\\\\tthrew = false;\\\\n/******/ \\\\t\\\\t} finally {\\\\n/******/ \\\\t\\\\t\\\\tif(threw) delete __webpack_module_cache__[moduleId];\\\\n/******/ \\\\t\\\\t}\\\\n/******/ \\\\t\\\\n/******/ \\\\t\\\\t// Flag the module as loaded\\\\n/******/ \\\\t\\\\tmodule.loaded = true;\\\\n/******/ \\\\t\\\\n/******/ \\\\t\\\\t// Return the exports of the module\\\\n/******/ \\\\t\\\\treturn module.exports;\\\\n/******/ \\\\t})\\\",\\\"loadChunk\\\":\\\"$E(() =\\u003e Promise.resolve())\\\"},\\\"pages\\\":[],\\\"routeModule\\\":{\\\"userland\\\":{\\\"loaderTree\\\":[\\\"\\\",\\\"$Y\\\",\\\"$Y\\\"]},\\\"definition\\\":\\\"$Y\\\"},\\\"tree\\\":\\\"$Y\\\",\\\"ClientPageRoot\\\":\\\"$22\\\",\\\"ClientSegmentRoot\\\":\\\"$23\\\",\\\"HTTPAccessFallbackBoundary\\\":\\\"$24\\\",\\\"LayoutRouter\\\":\\\"$5\\\",\\\"MetadataBoundary\\\":\\\"$14\\\",\\\"OutletBoundary\\\":\\\"$17\\\",\\\"Postpone\\\":\\\"$E(function Postpone({ reason, route }) {\\\\n    const prerenderStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\\\\n    const dynamicTracking = prerenderStore \\u0026\\u0026 prerenderStore.type === 'prerender-ppr' ? prerenderStore.dynamicTracking : null;\\\\n    postponeWithTracking(route, reason, dynamicTracking);\\\\n})\\\",\\\"RenderFromTemplateContext\\\":\\\"$6\\\",\\\"ViewportBoundary\\\":\\\"$25\\\",\\\"actionAsyncStorage\\\":\\\"$Y\\\",\\\"collectSegmentData\\\":\\\"$E(async function collectSegmentData(shouldAssumePartialData, fullPageDataBuffer, staleTime, clientModules, serverConsumerManifest, fallbackRouteParams) {\\\\n    // Traverse the router tree and generate a prefetch response for each segment.\\\\n    // A mutable map to collect the results as we traverse the route tree.\\\\n    const resultMap = new Map();\\\\n    // Before we start, warm up the module cache by decoding the page data once.\\\\n    // Then we can assume that any remaining async tasks that occur the next time\\\\n    // are due to hanging promises caused by dynamic data access. Note we only\\\\n    // have to do this once per page, not per individual segment.\\\\n    //\\\\n    try {\\\\n        await (0, _clientedge.createFromReadableStream)((0, _nodewebstreamshelper.streamFromBuffer)(fullPageDataBuffer), {\\\\n            serverConsumerManifest\\\\n        });\\\\n        await (0, _scheduler.waitAtLeastOneReactRenderTask)();\\\\n    } catch  {}\\\\n    // Create an abort controller that we'll use to stop the stream.\\\\n    const abortController = new AbortController();\\\\n    const onCompletedProcessingRouteTree = async ()=\\u003e{\\\\n        // Since all we're doing is decoding and re-encoding a cached prerender, if\\\\n        // serializing the stream takes longer than a microtask, it must because of\\\\n        // hanging promises caused by dynamic data.\\\\n        await (0, _scheduler.waitAtLeastOneReactRenderTask)();\\\\n        abortController.abort();\\\\n    };\\\\n    // Generate a stream for the route tree prefetch. While we're walking the\\\\n    // tree, we'll also spawn additional tasks to generate the segment prefetches.\\\\n    // The promises for these tasks are pushed to a mutable array that we will\\\\n    // await once the route tree is fully rendered.\\\\n    const segmentTasks = [];\\\\n    const { prelude: treeStream } = await (0, _staticedge.unstable_prerender)(// RootTreePrefetch is not a valid return type for a React component, but\\\\n    // we need to use a component so that when we decode the original stream\\\\n    // inside of it, the side effects are transferred to the new stream.\\\\n    // @ts-expect-error\\\\n    /*#__PURE__*/ (0, _jsxruntime.jsx)(PrefetchTreeData, {\\\\n        shouldAssumePartialData: shouldAssumePartialData,\\\\n        fullPageDataBuffer: fullPageDataBuffer,\\\\n        fallbackRouteParams: fallbackRouteParams,\\\\n        serverConsumerManifest: serverConsumerManifest,\\\\n        clientModules: clientModules,\\\\n        staleTime: staleTime,\\\\n        segmentTasks: segmentTasks,\\\\n        onCompletedProcessingRouteTree: onCompletedProcessingRouteTree\\\\n    }), clientModules, {\\\\n        signal: abortController.signal,\\\\n        onError: onSegmentPrerenderError\\\\n    });\\\\n    // Write the route tree to a special `/_tree` segment.\\\\n    const treeBuffer = await (0, _nodewebstreamshelper.streamToBuffer)(treeStream);\\\\n    resultMap.set('/_tree', treeBuffer);\\\\n    // Now that we've finished rendering the route tree, all the segment tasks\\\\n    // should have been spawned. Await them in parallel and write the segment\\\\n    // prefetches to the result map.\\\\n    for (const [segmentPath, buffer] of (await Promise.all(segmentTasks))){\\\\n        resultMap.set(segmentPath, buffer);\\\\n    }\\\\n    return resultMap;\\\\n})\\\",\\\"createMetadataComponents\\\":\\\"$E(function createMetadataComponents({ tree, searchParams, metadataContext, getDynamicParamFromSegment, appUsingSizeAdjustment, errorType, createServerParamsForMetadata, workStore, MetadataBoundary, ViewportBoundary, serveStreamingMetadata }) {\\\\n    function ViewportTree() {\\\\n        return /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {\\\\n            children: [\\\\n                /*#__PURE__*/ (0, _jsxruntime.jsx)(ViewportBoundary, {\\\\n                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Viewport, {})\\\\n                }),\\\\n                appUsingSizeAdjustment ? /*#__PURE__*/ (0, _jsxruntime.jsx)(\\\\\\\"meta\\\\\\\", {\\\\n                    name: \\\\\\\"next-size-adjust\\\\\\\",\\\\n                    content: \\\\\\\"\\\\\\\"\\\\n                }) : null\\\\n            ]\\\\n        });\\\\n    }\\\\n    function MetadataTree() {\\\\n        return /*#__PURE__*/ (0, _jsxruntime.jsx)(MetadataBoundary, {\\\\n            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(Metadata, {})\\\\n        });\\\\n    }\\\\n    function viewport() {\\\\n        return getResolvedViewport(tree, searchParams, getDynamicParamFromSegment, createServerParamsForMetadata, workStore, errorType);\\\\n    }\\\\n    async function Viewport() {\\\\n        try {\\\\n            return await viewport();\\\\n        } catch (error) {\\\\n            if (!errorType \\u0026\\u0026 (0, _httpaccessfallback.isHTTPAccessFallbackError)(error)) {\\\\n                try {\\\\n                    return await getNotFoundViewport(tree, searchParams, getDynamicParamFromSegment, createServerParamsForMetadata, workStore);\\\\n                } catch  {}\\\\n            }\\\\n            // We don't actually want to error in this component. We will\\\\n            // also error in the MetadataOutlet which causes the error to\\\\n            // bubble from the right position in the page to be caught by the\\\\n            // appropriate boundaries\\\\n            return null;\\\\n        }\\\\n    }\\\\n    Viewport.displayName = _metadataconstants.VIEWPORT_BOUNDARY_NAME;\\\\n    function metadata() {\\\\n        return getResolvedMetadata(tree, searchParams, getDynamicParamFromSegment, metadataContext, createServerParamsForMetadata, workStore, errorType);\\\\n    }\\\\n    async function resolveFinalMetadata() {\\\\n        let result;\\\\n        let error = null;\\\\n        try {\\\\n            result = await metadata();\\\\n            return {\\\\n                metadata: result,\\\\n                error: null,\\\\n                digest: undefined\\\\n            };\\\\n        } catch (metadataErr) {\\\\n            error = metadataErr;\\\\n            if (!errorType \\u0026\\u0026 (0, _httpaccessfallback.isHTTPAccessFallbackError)(metadataErr)) {\\\\n                try {\\\\n                    result = await getNotFoundMetadata(tree, searchParams, getDynamicParamFromSegment, metadataContext, createServerParamsForMetadata, workStore);\\\\n                    return {\\\\n                        metadata: result,\\\\n                        error,\\\\n                        digest: error == null ? void 0 : error.digest\\\\n                    };\\\\n                } catch (notFoundMetadataErr) {\\\\n                    error = notFoundMetadataErr;\\\\n                    // In PPR rendering we still need to throw the postpone error.\\\\n                    // If metadata is postponed, React needs to be aware of the location of error.\\\\n                    if (serveStreamingMetadata \\u0026\\u0026 (0, _ispostpone.isPostpone)(notFoundMetadataErr)) {\\\\n                        throw notFoundMetadataErr;\\\\n                    }\\\\n                }\\\\n            }\\\\n            // In PPR rendering we still need to throw the postpone error.\\\\n            // If metadata is postponed, React needs to be aware of the location of error.\\\\n            if (serveStreamingMetadata \\u0026\\u0026 (0, _ispostpone.isPostpone)(metadataErr)) {\\\\n                throw metadataErr;\\\\n            }\\\\n            // We don't actually want to error in this component. We will\\\\n            // also error in the MetadataOutlet which causes the error to\\\\n            // bubble from the right position in the page to be caught by the\\\\n            // appropriate boundaries\\\\n            return {\\\\n                metadata: result,\\\\n                error,\\\\n                digest: error == null ? void 0 : error.digest\\\\n            };\\\\n        }\\\\n    }\\\\n    async function Metadata() {\\\\n        const promise = resolveFinalMetadata();\\\\n        if (serveStreamingMetadata) {\\\\n            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Suspense, {\\\\n                fallback: null,\\\\n                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_asyncmetadata.AsyncMetadata, {\\\\n                    promise: promise\\\\n                })\\\\n            });\\\\n        }\\\\n        const metadataState = await promise;\\\\n        return metadataState.metadata;\\\\n    }\\\\n    Metadata.displayName = _metadataconstants.METADATA_BOUNDARY_NAME;\\\\n    async function getMetadataReady() {\\\\n        // Only warm up metadata() call when it's blocking metadata,\\\\n        // otherwise it will be fully managed by AsyncMetadata component.\\\\n        if (!serveStreamingMetadata) {\\\\n            await metadata();\\\\n        }\\\\n        return undefined;\\\\n    }\\\\n    async function getViewportReady() {\\\\n        await viewport();\\\\n        return undefined;\\\\n    }\\\\n    function StreamingMetadataOutlet() {\\\\n        if (serveStreamingMetadata) {\\\\n            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_asyncmetadata.AsyncMetadataOutlet, {\\\\n                promise: resolveFinalMetadata()\\\\n            });\\\\n        }\\\\n        return null;\\\\n    }\\\\n    return {\\\\n        ViewportTree,\\\\n        MetadataTree,\\\\n        getViewportReady,\\\\n        getMetadataReady,\\\\n        StreamingMetadataOutlet\\\\n    };\\\\n})\\\",\\\"createPrerenderParamsForClientSegment\\\":\\\"$E(function createPrerenderParamsForClientSegment(underlyingParams, workStore) {\\\\n    const prerenderStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\\\\n    if (prerenderStore \\u0026\\u0026 prerenderStore.type === 'prerender') {\\\\n        const fallbackParams = workStore.fallbackRouteParams;\\\\n        if (fallbackParams) {\\\\n            for(let key in underlyingParams){\\\\n                if (fallbackParams.has(key)) {\\\\n                    // This params object has one of more fallback params so we need to consider\\\\n                    // the awaiting of this params object \\\\\\\"dynamic\\\\\\\". Since we are in dynamicIO mode\\\\n                    // we encode this as a promise that never resolves\\\\n                    return (0, _dynamicrenderingutils.makeHangingPromise)(prerenderStore.renderSignal, '`params`');\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n    // We're prerendering in a mode that does not abort. We resolve the promise without\\\\n    // any tracking because we're just transporting a value from server to client where the tracking\\\\n    // will be applied.\\\\n    return Promise.resolve(underlyingParams);\\\\n})\\\",\\\"createPrerenderSearchParamsForClientPage\\\":\\\"$E(function createPrerenderSearchParamsForClientPage(workStore) {\\\\n    if (workStore.forceStatic) {\\\\n        // When using forceStatic we override all other logic and always just return an empty\\\\n        // dictionary object.\\\\n        return Promise.resolve({});\\\\n    }\\\\n    const prerenderStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\\\\n    if (prerenderStore \\u0026\\u0026 prerenderStore.type === 'prerender') {\\\\n        // dynamicIO Prerender\\\\n        // We're prerendering in a mode that aborts (dynamicIO) and should stall\\\\n        // the promise to ensure the RSC side is considered dynamic\\\\n        return (0, _dynamicrenderingutils.makeHangingPromise)(prerenderStore.renderSignal, '`searchParams`');\\\\n    }\\\\n    // We're prerendering in a mode that does not aborts. We resolve the promise without\\\\n    // any tracking because we're just transporting a value from server to client where the tracking\\\\n    // will be applied.\\\\n    return Promise.resolve({});\\\\n})\\\",\\\"createServerParamsForMetadata\\\":\\\"$E(function createServerParamsForServerSegment(underlyingParams, workStore) {\\\\n    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\\\\n    if (workUnitStore) {\\\\n        switch(workUnitStore.type){\\\\n            case 'prerender':\\\\n            case 'prerender-ppr':\\\\n            case 'prerender-legacy':\\\\n                return createPrerenderParams(underlyingParams, workStore, workUnitStore);\\\\n            default:\\\\n        }\\\\n    }\\\\n    return createRenderParams(underlyingParams, workStore);\\\\n})\\\",\\\"createServerParamsForServerSegment\\\":\\\"$E(function createServerParamsForServerSegment(underlyingParams, workStore) {\\\\n    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\\\\n    if (workUnitStore) {\\\\n        switch(workUnitStore.type){\\\\n            case 'prerender':\\\\n            case 'prerender-ppr':\\\\n            case 'prerender-legacy':\\\\n                return createPrerenderParams(underlyingParams, workStore, workUnitStore);\\\\n            default:\\\\n        }\\\\n    }\\\\n    return createRenderParams(underlyingParams, workStore);\\\\n})\\\",\\\"createServerSearchParamsForMetadata\\\":\\\"$E(function createServerSearchParamsForServerPage(underlyingSearchParams, workStore) {\\\\n    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\\\\n    if (workUnitStore) {\\\\n        switch(workUnitStore.type){\\\\n            case 'prerender':\\\\n            case 'prerender-ppr':\\\\n            case 'prerender-legacy':\\\\n                return createPrerenderSearchParams(workStore, workUnitStore);\\\\n            default:\\\\n        }\\\\n    }\\\\n    return createRenderSearchParams(underlyingSearchParams, workStore);\\\\n})\\\",\\\"createServerSearchParamsForServerPage\\\":\\\"$E(function createServerSearchParamsForServerPage(underlyingSearchParams, workStore) {\\\\n    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();\\\\n    if (workUnitStore) {\\\\n        switch(workUnitStore.type){\\\\n            case 'prerender':\\\\n            case 'prerender-ppr':\\\\n            case 'prerender-legacy':\\\\n                return createPrerenderSearchParams(workStore, workUnitStore);\\\\n            default:\\\\n        }\\\\n    }\\\\n    return createRenderSearchParams(underlyingSearchParams, workStore);\\\\n})\\\",\\\"createTemporaryReferenceSet\\\":\\\"$E(function(){return new WeakMap})\\\",\\\"decodeAction\\\":\\\"$E(function(body,serverManifest){var formData=new FormData,action=null;return body.forEach(function(value1,key){key.startsWith(\\\\\\\"$ACTION_\\\\\\\")?key.startsWith(\\\\\\\"$ACTION_REF_\\\\\\\")?(value1=decodeBoundActionMetaData(body,serverManifest,value1=\\\\\\\"$ACTION_\\\\\\\"+key.slice(12)+\\\\\\\":\\\\\\\"),action=loadServerReference(serverManifest,value1.id,value1.bound)):key.startsWith(\\\\\\\"$ACTION_ID_\\\\\\\")\\u0026\\u0026(action=loadServerReference(serverManifest,value1=key.slice(11),null)):formData.append(key,value1)}),null===action?null:action.then(function(fn){return fn.bind(null,formData)})})\\\",\\\"decodeFormState\\\":\\\"$E(function(actionResult,body,serverManifest){var keyPath=body.get(\\\\\\\"$ACTION_KEY\\\\\\\");if(\\\\\\\"string\\\\\\\"!=typeof keyPath)return Promise.resolve(null);var metaData=null;if(body.forEach(function(value1,key){key.startsWith(\\\\\\\"$ACTION_REF_\\\\\\\")\\u0026\\u0026(metaData=decodeBoundActionMetaData(body,serverManifest,\\\\\\\"$ACTION_\\\\\\\"+key.slice(12)+\\\\\\\":\\\\\\\"))}),null===metaData)return Promise.resolve(null);var referenceId=metaData.id;return Promise.resolve(metaData.bound).then(function(bound){return null===bound?null:[actionResult,keyPath,referenceId,bound.length-1]})})\\\",\\\"decodeReply\\\":\\\"$E(function(body,webpackMap,options){if(\\\\\\\"string\\\\\\\"==typeof body){var form=new FormData;form.append(\\\\\\\"0\\\\\\\",body),body=form}return webpackMap=getChunk(body=createResponse(webpackMap,\\\\\\\"\\\\\\\",options?options.temporaryReferences:void 0,body),0),close(body),webpackMap})\\\",\\\"patchFetch\\\":\\\"$E(function patchFetch() {\\\\n    return (0, _patchfetch.patchFetch)({\\\\n        workAsyncStorage: _workasyncstorageexternal.workAsyncStorage,\\\\n        workUnitAsyncStorage: _workunitasyncstorageexternal.workUnitAsyncStorage\\\\n    });\\\\n})\\\",\\\"preconnect\\\":\\\"$E(function preconnect(href, crossOrigin, nonce) {\\\\n    const opts = {};\\\\n    if (typeof crossOrigin === 'string') {\\\\n        opts.crossOrigin = crossOrigin;\\\\n    }\\\\n    if (typeof nonce === 'string') {\\\\n        opts.nonce = nonce;\\\\n    }\\\\n    ;\\\\n    _reactdom.default.preconnect(href, opts);\\\\n})\\\",\\\"preloadFont\\\":\\\"$E(function preloadFont(href, type, crossOrigin, nonce) {\\\\n    const opts = {\\\\n        as: 'font',\\\\n        type\\\\n    };\\\\n    if (typeof crossOrigin === 'string') {\\\\n        opts.crossOrigin = crossOrigin;\\\\n    }\\\\n    if (typeof nonce === 'string') {\\\\n        opts.nonce = nonce;\\\\n    }\\\\n    _reactdom.default.preload(href, opts);\\\\n})\\\",\\\"preloadStyle\\\":\\\"$E(function preloadStyle(href, crossOrigin, nonce) {\\\\n    const opts = {\\\\n        as: 'style'\\\\n    };\\\\n    if (typeof crossOrigin === 'string') {\\\\n        opts.crossOrigin = crossOrigin;\\\\n    }\\\\n    if (typeof nonce === 'string') {\\\\n        opts.nonce = nonce;\\\\n    }\\\\n    _reactdom.default.preload(href, opts);\\\\n})\\\",\\\"prerender\\\":\\\"$E(function(model,webpackMap,options){return new Promise(function(resolve,reject){var request=new RequestInstance(PRERENDER,model,webpackMap,options?options.onError:void 0,options?options.identifierPrefix:void 0,options?options.onPostpone:void 0,options?options.temporaryReferences:void 0,options?options.environmentName:void 0,options?options.filterStackFrame:void 0,function(){resolve({prelude:new ReadableStream({type:\\\\\\\"bytes\\\\\\\",start:function(){startWork(request)},pull:function(controller){startFlowing(request,controller)},cancel:function(reason){request.destination=null,abort(request,reason)}},{highWaterMark:0})})},reject);if(options\\u0026\\u0026options.signal){var signal=options.signal;if(signal.aborted)abort(request,signal.reason);else{var listener=function(){abort(request,signal.reason),signal.removeEventListener(\\\\\\\"abort\\\\\\\",listener)};signal.addEventListener(\\\\\\\"abort\\\\\\\",listener)}}startWork(request)})})\\\",\\\"renderToReadableStream\\\":\\\"$E(function(model,webpackMap,options){var request=new RequestInstance(20,model,webpackMap,options?options.onError:void 0,options?options.identifierPrefix:void 0,options?options.onPostpone:void 0,options?options.temporaryReferences:void 0,options?options.environmentName:void 0,options?options.filterStackFrame:void 0,noop,noop);if(options\\u0026\\u0026options.signal){var signal=options.signal;if(signal.aborted)abort(request,signal.reason);else{var listener=function(){abort(request,signal.reason),signal.removeEventListener(\\\\\\\"abort\\\\\\\",listener)};signal.addEventListener(\\\\\\\"abort\\\\\\\",listener)}}return new ReadableStream({type:\\\\\\\"bytes\\\\\\\",start:function(){startWork(request)},pull:function(controller){startFlowing(request,controller)},cancel:function(reason){request.destination=null,abort(request,reason)}},{highWaterMark:0})})\\\",\\\"serverHooks\\\":\\\"$Y\\\",\\\"taintObjectReference\\\":\\\"$E(function notImplemented() {\\\\n    throw Object.defineProperty(new Error('Taint can only be used with the taint flag.'), \\\\\\\"__NEXT_ERROR_CODE\\\\\\\", {\\\\n        value: \\\\\\\"E354\\\\\\\",\\\\n        enumerable: false,\\\\n        configurable: true\\\\n    });\\\\n})\\\",\\\"workAsyncStorage\\\":\\\"$Y\\\",\\\"workUnitAsyncStorage\\\":\\\"$Y\\\"},\\\"url\\\":\\\"$Y\\\",\\\"renderOpts\\\":\\\"$Y\\\",\\\"workStore\\\":\\\"$Y\\\",\\\"parsedRequestHeaders\\\":\\\"$Y\\\",\\\"getDynamicParamFromSegment\\\":\\\"$E(function(segment){let segmentParam=getSegmentParam(segment);if(!segmentParam)return null;let key=segmentParam.param,value1=params[key];if(fallbackRouteParams\\u0026\\u0026fallbackRouteParams.has(segmentParam.param)?value1=fallbackRouteParams.get(segmentParam.param):Array.isArray(value1)?value1=value1.map(i=\\u003eencodeURIComponent(i)):\\\\\\\"string\\\\\\\"==typeof value1\\u0026\\u0026(value1=encodeURIComponent(value1)),!value1){let isCatchall=\\\\\\\"catchall\\\\\\\"===segmentParam.type,isOptionalCatchall=\\\\\\\"optional-catchall\\\\\\\"===segmentParam.type;if(isCatchall||isOptionalCatchall){let dynamicParamType=dynamicParamTypes[segmentParam.type];return isOptionalCatchall?{param:key,value:null,type:dynamicParamType,treeSegment:[key,\\\\\\\"\\\\\\\",dynamicParamType]}:{param:key,value:value1=pagePath.split(\\\\\\\"/\\\\\\\").slice(1).flatMap(pathSegment=\\u003e{let param=function(param){let match=param.match(PARAMETER_PATTERN);return match?parseMatchedParameter(match[2]):parseMatchedParameter(param)}(pathSegment);return params[param.key]??param.key}),type:dynamicParamType,treeSegment:[key,value1.join(\\\\\\\"/\\\\\\\"),dynamicParamType]}}}let type=function(type){let short=dynamicParamTypes[type];if(!short)throw Object.defineProperty(Error(\\\\\\\"Unknown dynamic param type\\\\\\\"),\\\\\\\"__NEXT_ERROR_CODE\\\\\\\",{value:\\\\\\\"E378\\\\\\\",enumerable:!1,configurable:!0});return short}(segmentParam.type);return{param:key,value:value1,treeSegment:[key,Array.isArray(value1)?value1.join(\\\\\\\"/\\\\\\\"):value1,type],type:type}})\\\",\\\"query\\\":\\\"$Y\\\",\\\"isPrefetch\\\":false,\\\"isAction\\\":false,\\\"requestTimestamp\\\":1757462944535,\\\"appUsingSizeAdjustment\\\":false,\\\"flightRouterState\\\":\\\"$undefined\\\",\\\"requestId\\\":\\\"yyg8egrrqvNnGEQAFG9wy\\\",\\\"pagePath\\\":\\\"/404\\\",\\\"clientReferenceManifest\\\":\\\"$Y\\\",\\\"assetPrefix\\\":\\\"\\\",\\\"isNotFoundPath\\\":true,\\\"nonce\\\":\\\"$undefined\\\",\\\"res\\\":\\\"$Y\\\",\\\"sharedContext\\\":\\\"$Y\\\"}}}\\n\"])</script><script>self.__next_f.push([1,\"20:D\\\"$26\\\"\\n20:[\\\"$\\\",\\\"meta\\\",null,{\\\"name\\\":\\\"robots\\\",\\\"content\\\":\\\"noindex\\\"},null,[],1]\\n28:{\\\"name\\\":\\\"ViewportTree\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":\\\"yyg8egrrqvNnGEQAFG9wy\\\",\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{}}\\n27:D\\\"$28\\\"\\n2a:{\\\"name\\\":\\\"__next_viewport_boundary__\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":\\\"$28\\\",\\\"stack\\\":[],\\\"props\\\":{}}\\n29:D\\\"$2a\\\"\\n27:[\\\"$\\\",\\\"$3\\\",\\\"yyg8egrrqvNnGEQAFG9wy\\\",{\\\"children\\\":[[\\\"$\\\",\\\"$L25\\\",null,{\\\"children\\\":\\\"$L29\\\"},\\\"$28\\\",[],1],null]},null,null,0]\\n2c:{\\\"name\\\":\\\"\\\",\\\"env\\\":\\\"Server\\\",\\\"key\\\":null,\\\"owner\\\":null,\\\"stack\\\":[],\\\"props\\\":{}}\\n2b:D\\\"$2c\\\"\\n2b:null\\n2d:[]\\n0:{\\\"P\\\":\\\"$1\\\",\\\"b\\\":\\\"development\\\",\\\"p\\\":\\\"\\\",\\\"c\\\":[\\\"\\\",\\\"api\\\",\\\"products\\\"],\\\"i\\\":false,\\\"f\\\":[[[\\\"\\\",{\\\"children\\\":[\\\"/_not-found\\\",{\\\"children\\\":[\\\"__PAGE__\\\",{}]}]},\\\"$undefined\\\",\\\"$undefined\\\",true],[\\\"\\\",[\\\"$\\\",\\\"$3\\\",\\\"c\\\",{\\\"children\\\":[[[\\\"$\\\",\\\"link\\\",\\\"0\\\",{\\\"rel\\\":\\\"stylesheet\\\",\\\"href\\\":\\\"/_next/static/css/app/layout.css?v=1757462944535\\\",\\\"precedence\\\":\\\"next_static/css/app/layout.css\\\",\\\"crossOrigin\\\":\\\"$undefined\\\",\\\"nonce\\\":\\\"$undefined\\\"},null,[],0]],\\\"$4\\\"]},null,[],0],{\\\"children\\\":[\\\"/_not-found\\\",[\\\"$\\\",\\\"$3\\\",\\\"c\\\",{\\\"children\\\":[null,[\\\"$\\\",\\\"$L5\\\",null,{\\\"parallelRouterKey\\\":\\\"children\\\",\\\"error\\\":\\\"$undefined\\\",\\\"errorStyles\\\":\\\"$undefined\\\",\\\"errorScripts\\\":\\\"$undefined\\\",\\\"template\\\":[\\\"$\\\",\\\"$L6\\\",null,{},null,[],1],\\\"templateStyles\\\":\\\"$undefined\\\",\\\"templateScripts\\\":\\\"$undefined\\\",\\\"notFound\\\":\\\"$undefined\\\",\\\"forbidden\\\":\\\"$undefined\\\",\\\"unauthorized\\\":\\\"$undefined\\\"},null,[],1]]},null,[],0],{\\\"children\\\":[\\\"__PAGE__\\\",[\\\"$\\\",\\\"$3\\\",\\\"c\\\",{\\\"children\\\":[\\\"$e\\\",\\\"$11\\\",null,[\\\"$\\\",\\\"$L17\\\",null,{\\\"children\\\":[\\\"$L18\\\",\\\"$L1a\\\",\\\"$1c\\\"]},null,[],1]]},null,[],0],{},null,false]},null,false]},null,false],[\\\"$\\\",\\\"$3\\\",\\\"h\\\",{\\\"children\\\":[\\\"$20\\\",\\\"$27\\\",\\\"$2b\\\"]},null,[],0],false]],\\\"m\\\":\\\"$W2d\\\",\\\"G\\\":[\\\"$21\\\",\\\"$undefined\\\"],\\\"s\\\":false,\\\"S\\\":false}\\n15:[\\\"$\\\",\\\"$2e\\\",null,{\\\"fallback\\\":null,\\\"children\\\":[\\\"$\\\",\\\"$L2f\\\",null,{\\\"promise\\\":\\\"$@30\\\"},\\\"$16\\\",[],1]},\\\"$16\\\",[],1]\\n1a:null\\n30:{\\\"metadata\\\":[[\\\"$\\\",\\\"title\\\",\\\"0\\\",{\\\"children\\\":\\\"Pizzaria Digital\\\"},\\\"$16\\\",[],0],[\\\"$\\\",\\\"meta\\\",\\\"1\\\",{\\\"name\\\":\\\"description\\\",\\\"content\\\":\\\"Cardápio digital para pizzaria\\\"},\\\"$16\\\",[],0],[\\\"$\\\",\\\"meta\\\",\\\"2\\\",{\\\"name\\\":\\\"generator\\\",\\\"content\\\":\\\"v0.dev\\\"},\\\"$16\\\",[],0]],\\\"error\\\":null,\\\"digest\\\":\\\"$undefined\\\"}\\n1f:{\\\"meta\"])</script><script>self.__next_f.push([1,\"data\\\":\\\"$30:metadata\\\",\\\"error\\\":null,\\\"digest\\\":\\\"$undefined\\\"}\\n29:[[\\\"$\\\",\\\"meta\\\",\\\"0\\\",{\\\"charSet\\\":\\\"utf-8\\\"},\\\"$19\\\",[],0],[\\\"$\\\",\\\"meta\\\",\\\"1\\\",{\\\"name\\\":\\\"viewport\\\",\\\"content\\\":\\\"width=device-width, initial-scale=1\\\"},\\\"$19\\\",[],0]]\\n18:null\\n\"])</script></body></html>\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T00:07:34.580Z",
    "modified": "2025-09-10T00:08:26.835Z"
  },
  {
    "projectId": "944531b1-27df-4dde-bc2a-b6637e41d950",
    "testId": "723b9fa0-2bb8-4646-86ba-2b7d20cd78f4",
    "userId": "e428a4a8-60d1-7051-a86d-c0c12ee9791a",
    "title": "TC009-remove item from cart",
    "description": "Test the POST /api/cart/remove endpoint to remove an item from the shopping cart and verify the cart updates correctly.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:3000\"\nAUTH = HTTPBasicAuth('admin@pizzaria.com', 'admin123')\nTIMEOUT = 30\n\ndef test_remove_item_from_cart():\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Step 1: Get list of products to find a product_id to add to cart\n    product_id = None\n    try:\n        resp_products = requests.get(f\"{BASE_URL}/api/products\", auth=AUTH, headers=headers, timeout=TIMEOUT)\n        assert resp_products.status_code == 200, f\"Failed to list products: {resp_products.status_code}\"\n        products = resp_products.json()\n        assert isinstance(products, list) and len(products) > 0, \"Products list is empty or invalid\"\n        product_id = products[0].get(\"id\") if \"id\" in products[0] else products[0].get(\"product_id\") if \"product_id\" in products[0] else None\n        assert product_id is not None, \"Product ID not found in product data\"\n    except Exception as e:\n        raise AssertionError(f\"Setup failed to get product ID: {e}\")\n\n    # Step 2: Add item to cart\n    add_payload = {\n        \"product_id\": product_id,\n        \"quantity\": 1,\n        \"customizations\": {}\n    }\n    try:\n        resp_add = requests.post(f\"{BASE_URL}/api/cart/add\", json=add_payload, auth=AUTH, headers=headers, timeout=TIMEOUT)\n        assert resp_add.status_code == 200, f\"Failed to add item to cart: {resp_add.status_code}\"\n    except Exception as e:\n        raise AssertionError(f\"Failed adding item to cart: {e}\")\n\n    # Step 3: Remove the item from cart\n    remove_payload = {\n        \"product_id\": product_id\n    }\n    try:\n        resp_remove = requests.post(f\"{BASE_URL}/api/cart/remove\", json=remove_payload, auth=AUTH, headers=headers, timeout=TIMEOUT)\n        assert resp_remove.status_code == 200, f\"Failed to remove item from cart: {resp_remove.status_code}\"\n    except Exception as e:\n        raise AssertionError(f\"Failed removing item from cart: {e}\")\n\n    # Step 4: Verify cart is updated (Assuming GET /api/cart returns current cart)\n    try:\n        resp_cart = requests.get(f\"{BASE_URL}/api/cart\", auth=AUTH, headers=headers, timeout=TIMEOUT)\n        # It is not explicitly in PRD but logically we verify cart state after removal.\n        assert resp_cart.status_code == 200, f\"Failed to get cart: {resp_cart.status_code}\"\n        cart = resp_cart.json()\n        # Cart should not contain the product_id anymore\n        if isinstance(cart, dict) and \"items\" in cart:\n            items = cart[\"items\"]\n            assert all(item.get(\"product_id\") != product_id for item in items), \"Product still in cart after removal\"\n        else:\n            # If structure unknown, assert cart is empty or no items\n            assert (isinstance(cart, list) and all(i.get(\"product_id\") != product_id for i in cart)) or not cart, \"Product still present in cart\"\n    except Exception as e:\n        raise AssertionError(f\"Failed verifying cart update: {e}\")\n\ntest_remove_item_from_cart()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 17, in test_remove_item_from_cart\nAssertionError: Failed to list products: 404\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 63, in <module>\n  File \"<string>\", line 23, in test_remove_item_from_cart\nAssertionError: Setup failed to get product ID: Failed to list products: 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T00:07:34.586Z",
    "modified": "2025-09-10T00:08:10.193Z"
  },
  {
    "projectId": "944531b1-27df-4dde-bc2a-b6637e41d950",
    "testId": "c8f9cc82-9e4c-4890-a761-2bf3ece57af1",
    "userId": "e428a4a8-60d1-7051-a86d-c0c12ee9791a",
    "title": "TC010-process order checkout",
    "description": "Test the POST /api/checkout endpoint with valid customer info, payment method, delivery option, and items to ensure order is processed and sent via WhatsApp.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:3000\"\nTIMEOUT = 30\nAUTH = HTTPBasicAuth(\"admin@pizzaria.com\", \"admin123\")\nHEADERS = {\"Content-Type\": \"application/json\"}\n\n\ndef test_TC010_process_order_checkout():\n    url = f\"{BASE_URL}/api/checkout\"\n    payload = {\n        \"customer_info\": {\n            \"name\": \"João Silva\",\n            \"phone\": \"+5511999999999\",\n            \"email\": \"joao.silva@example.com\",\n            \"address\": \"Rua das Flores, 123, São Paulo, SP\"\n        },\n        \"payment_method\": \"cartão\",\n        \"delivery_option\": \"delivery\",\n        \"items\": [\n            {\n                \"product_id\": 1,\n                \"quantity\": 2,\n                \"customizations\": {\n                    \"size\": \"M\",\n                    \"flavor\": \"Margherita\",\n                    \"additional_ingredients\": [\"bacon\", \"extra cheese\"]\n                }\n            },\n            {\n                \"product_id\": 3,\n                \"quantity\": 1,\n                \"customizations\": {\n                    \"size\": \"G\",\n                    \"flavor\": \"Calabresa\",\n                    \"additional_ingredients\": []\n                }\n            }\n        ]\n    }\n\n    try:\n        response = requests.post(url, auth=AUTH, headers=HEADERS, json=payload, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected status 200, got {response.status_code}\"\n        json_response = response.json()\n        assert \"message\" in json_response or \"order_id\" in json_response or \"whatsapp\" in json_response, \\\n            \"Response missing expected keys indicating order processing\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n\ntest_TC010_process_order_checkout()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 53, in <module>\n  File \"<string>\", line 45, in test_TC010_process_order_checkout\nAssertionError: Expected status 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-09-10T00:07:34.593Z",
    "modified": "2025-09-10T00:08:12.746Z"
  }
]
