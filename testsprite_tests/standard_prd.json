{
  "meta": {
    "project": "Cardápio Digital para Pizzaria",
    "date": "2025-09-10",
    "prepared_by": "Equipe de Desenvolvimento"
  },
  "product_overview": "O Cardápio Digital para Pizzaria é uma aplicação web que digitaliza o processo de pedidos para pizzarias, proporcionando uma experiência simples e intuitiva para clientes, junto a um robusto painel administrativo para gerenciamento de produtos, categorias e configurações. O sistema automatiza o envio de pedidos via WhatsApp, suporta múltiplas modalidades de pagamento, e otimiza operações de delivery e retirada no balcão.",
  "core_goals": [
    "Digitalizar o processo de pedidos da pizzaria para modernizar o atendimento ao cliente.",
    "Simplificar a experiência do cliente na escolha, personalização e compra de produtos.",
    "Automatizar o envio de pedidos via WhatsApp para maior eficiência.",
    "Centralizar o gerenciamento do cardápio, configurações e promoções em um painel administrativo.",
    "Garantir a segurança, responsividade e escalabilidade do sistema."
  ],
  "key_features": [
    "Sistema de autenticação seguro para administradores com login/logout e sessões persistentes.",
    "Gerenciamento completo (CRUD) de produtos com suporte a variadas categorias, tamanhos, sabores e adicionais personalizáveis.",
    "Catálogo visual com carousel promocional, filtros de produtos e informações detalhadas para os clientes.",
    "Carrinho de compras com gerenciamento de itens, ajustes de quantidade, cálculo automático de preços e persistência entre sessões.",
    "Checkout com stepper vertical, coleta de dados do cliente, modalidades de entrega, múltiplas formas de pagamento e finalização via WhatsApp.",
    "Painel administrativo para gestão de categorias, configurações de pizzaria (horários, formas de pagamento, contato) e upload de imagens com preview.",
    "Sistema de promoções dinâmicas, status ativo/inativo para produtos e categorias, e controle de preços promocionais.",
    "Ferramentas de debug administrativo para monitoramento e análise de dados e performance do sistema.",
    "Arquitetura SPA moderna com Next.js, React e Supabase, garantindo alta performance e segurança via RLS e validação front-backend."
  ],
  "user_flow_summary": [
    "Cliente acessa a homepage, visualiza o cardápio e navega por categorias com filtros e promoções visuais.",
    "Seleciona produtos, personaliza sabores, tamanhos e adicionais conforme o tipo de produto.",
    "Adiciona os itens ao carrinho, revisa o pedido, ajusta quantidades e remove produtos se necessário.",
    "Preenche os dados pessoais, escolhe modalidade de entrega (delivery ou retirada) e seleciona a forma de pagamento (dinheiro, cartão, PIX).",
    "Finaliza o pedido que é enviado automáticamente via WhatsApp para a pizzaria.",
    "Administrador realiza login seguro e acessa o painel administrativo.",
    "Gerencia produtos e categorias, faz upload de imagens, configura preços e promoções.",
    "Configura dados gerais da pizzaria como horários, taxas e formas de pagamento.",
    "Utiliza ferramentas de debug para análise e monitoração do sistema."
  ],
  "validation_criteria": [
    "Sistema de autenticação deve permitir login e logout seguro com proteção de rotas administrativas.",
    "CRUD de produtos e categorias deve suportar criação, edição, exclusão e listagem com dados válidos e upload de imagens funcional.",
    "Carrinho de compras deve manter estado persistente, permitir ajustes de itens e refletir cálculos de preços corretamente.",
    "Checkout deve validar entradas, suportar todas formas de pagamento listadas e processar pedidos com sucesso.",
    "Pedidos devem ser enviados corretamente e formatados via WhatsApp, com histórico armazenado.",
    "Configurações da pizzaria devem ser atualizáveis e refletidas corretamente no frontend.",
    "O sistema deve responder dentro de 3 segundos em rotinas principais, incluindo carregamento e operações de CRUD.",
    "Logs e ferramentas administrativas devem permitir rastreamento de erros e análise de performance em ambiente de produção.",
    "Aplicação deve ser responsiva e acessível conforme padrões WCAG, com feedback visual em interações críticas.",
    "Segurança implementada por Supabase Auth, HTTPS obrigatório e RLS com validações no backend para dados sensíveis."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js",
      "React",
      "Supabase",
      "PostgreSQL",
      "Tailwind CSS",
      "Radix UI"
    ],
    "features": [
      {
        "name": "Authentication API",
        "description": "Sistema de autenticação para administradores com login/logout e gerenciamento de sessão",
        "files": [
          "lib/auth-context.tsx",
          "app/admin/login/page.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Authentication API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/auth/login": {
              "post": {
                "summary": "Admin login",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Login successful"
                  },
                  "401": {
                    "description": "Invalid credentials"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Product Management API",
        "description": "CRUD operations para produtos incluindo categorias, sabores, tamanhos e preços",
        "files": [
          "app/admin/produtos/page.tsx",
          "lib/supabase.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Product Management API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/products": {
              "get": {
                "summary": "List all products",
                "responses": {
                  "200": {
                    "description": "List of products"
                  }
                }
              },
              "post": {
                "summary": "Create new product",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "nome": {
                            "type": "string"
                          },
                          "categoria_id": {
                            "type": "integer"
                          },
                          "preco": {
                            "type": "number"
                          },
                          "descricao": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Product created"
                  },
                  "400": {
                    "description": "Invalid data"
                  }
                }
              }
            },
            "/api/products/{id}": {
              "put": {
                "summary": "Update product",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Product updated"
                  }
                }
              },
              "delete": {
                "summary": "Delete product",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "integer"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Product deleted"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Category Management API",
        "description": "Gerenciamento de categorias de produtos com operações CRUD",
        "files": [
          "app/admin/page.tsx",
          "lib/supabase.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Category Management API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/categories": {
              "get": {
                "summary": "List all categories",
                "responses": {
                  "200": {
                    "description": "List of categories"
                  }
                }
              },
              "post": {
                "summary": "Create new category",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "nome": {
                            "type": "string"
                          },
                          "descricao": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Category created"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Shopping Cart API",
        "description": "Sistema de carrinho de compras com gerenciamento de itens, quantidades e cálculos",
        "files": [
          "lib/cart-context.tsx",
          "components/cart-footer.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Shopping Cart API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/cart/add": {
              "post": {
                "summary": "Add item to cart",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "product_id": {
                            "type": "integer"
                          },
                          "quantity": {
                            "type": "integer"
                          },
                          "customizations": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Item added to cart"
                  }
                }
              }
            },
            "/api/cart/remove": {
              "post": {
                "summary": "Remove item from cart",
                "responses": {
                  "200": {
                    "description": "Item removed"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Checkout API",
        "description": "Sistema de finalização de pedidos com integração WhatsApp e múltiplas formas de pagamento",
        "files": [
          "app/checkout/page.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Checkout API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/checkout": {
              "post": {
                "summary": "Process order checkout",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "customer_info": {
                            "type": "object"
                          },
                          "payment_method": {
                            "type": "string"
                          },
                          "delivery_option": {
                            "type": "string"
                          },
                          "items": {
                            "type": "array"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Order processed successfully"
                  },
                  "400": {
                    "description": "Invalid order data"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Store Configuration API",
        "description": "Configurações da pizzaria incluindo horários, formas de pagamento e informações de contato",
        "files": [
          "app/admin/config/page.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Store Configuration API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/config": {
              "get": {
                "summary": "Get store configuration",
                "responses": {
                  "200": {
                    "description": "Store configuration"
                  }
                }
              },
              "put": {
                "summary": "Update store configuration",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "opening_hours": {
                            "type": "object"
                          },
                          "payment_methods": {
                            "type": "array"
                          },
                          "contact_info": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Configuration updated"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Database Operations API",
        "description": "Operações de banco de dados via Supabase com Row Level Security",
        "files": [
          "lib/supabase.ts",
          "scripts/01-create-tables.sql",
          "scripts/02-admin-setup.sql"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Database Operations API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/db/health": {
              "get": {
                "summary": "Check database health",
                "responses": {
                  "200": {
                    "description": "Database is healthy"
                  }
                }
              }
            },
            "/api/db/migrate": {
              "post": {
                "summary": "Run database migrations",
                "responses": {
                  "200": {
                    "description": "Migrations completed"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Debug Tools API",
        "description": "Ferramentas de debug para testar conexões e consultas ao banco de dados",
        "files": [
          "app/admin/debug/page.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Debug Tools API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/debug/connection": {
              "get": {
                "summary": "Test database connection",
                "responses": {
                  "200": {
                    "description": "Connection successful"
                  }
                }
              }
            },
            "/api/debug/query": {
              "post": {
                "summary": "Execute debug query",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "query": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Query executed"
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
